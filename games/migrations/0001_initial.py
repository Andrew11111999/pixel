# Generated by Django 5.2 on 2025-05-12 12:07

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название разработчика')),
            ],
            options={
                'db_table': 'developers',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название жанра')),
            ],
            options={
                'db_table': 'genres',
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название платформы')),
            ],
            options={
                'db_table': 'platforms',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название издателя')),
            ],
            options={
                'db_table': 'publishers',
            },
        ),
        migrations.CreateModel(
            name='SystemRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu', models.CharField(blank=True, max_length=255, verbose_name='Процессор')),
                ('gpu', models.CharField(blank=True, max_length=255, verbose_name='Видеокарта')),
                ('ram', models.CharField(blank=True, max_length=255, verbose_name='Оперативная память')),
                ('ssd', models.CharField(blank=True, max_length=255, verbose_name='Необходимый диск (SSD)')),
                ('os', models.CharField(blank=True, max_length=255, verbose_name='Операционная система')),
            ],
            options={
                'db_table': 'system_requirements',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='Название игры')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг игры')),
                ('slogan', models.CharField(blank=True, max_length=255, verbose_name='Слоган')),
                ('short_description', models.TextField(blank=True, verbose_name='Краткое описание')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('release_date', models.DateField(verbose_name='Дата выхода')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Избранная игра')),
                ('favourite', models.BooleanField(default=False, verbose_name='Избранное')),
                ('is_top_in_year', models.BooleanField(default=False, verbose_name='Топ в этом году')),
                ('is_top_in_genre', models.BooleanField(default=False, verbose_name='Топ в жанре')),
                ('trending', models.BooleanField(default=False, verbose_name='Трендовая игра')),
                ('metacritic_score', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Рейтинг Metacritic')),
                ('ign_score', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Рейтинг IGN')),
                ('score', models.FloatField(blank=True, null=True, verbose_name='Общий рейтинг')),
                ('media_cover_image', models.URLField(blank=True, verbose_name='Ссылка на обложку')),
                ('media_background_video', models.URLField(blank=True, verbose_name='Ссылка на фоновое видео')),
                ('screenshots', models.TextField(blank=True, help_text='Ссылки на скриншоты через запятую', verbose_name='Скриншоты')),
                ('trailers', models.TextField(blank=True, help_text='Ссылки на трейлеры через запятую', verbose_name='Трейлеры')),
                ('alt_genres', models.CharField(blank=True, max_length=255, verbose_name='Альтернативные жанры')),
                ('developers', models.ManyToManyField(related_name='games', to='games.developer', verbose_name='Разработчики')),
                ('genres', models.ManyToManyField(related_name='games', to='games.genre', verbose_name='Жанры')),
                ('platforms', models.ManyToManyField(related_name='games', to='games.platform', verbose_name='Платформы')),
                ('publishers', models.ManyToManyField(related_name='games', to='games.publisher', verbose_name='Издатели')),
                ('system_requirements', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='games.systemrequirement', verbose_name='Системные требования')),
            ],
            options={
                'db_table': 'games',
            },
        ),
        migrations.CreateModel(
            name='GameSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_percent', models.PositiveSmallIntegerField(verbose_name='Процент схожести')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_games_from', to='games.game', verbose_name='Игра')),
                ('related_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_games_to', to='games.game', verbose_name='Похожая игра')),
            ],
            options={
                'db_table': 'game_similarities',
                'unique_together': {('game', 'related_game')},
            },
        ),
    ]
